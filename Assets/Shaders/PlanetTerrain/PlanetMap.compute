

#pragma kernel CSMain
#include "Includes/Noise.compute"

RWTexture3D<float> DensityTexture;
int textureSize;

float planetSize;
float noiseScale;
float noiseHeightMultiplier;

float fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos) {
	float noise = 0;
	float frequency = scale / 100;
	float amplitude = 1;

	for (int i = 0; i < numLayers; i ++) {
		float n = 1-abs(snoise(pos * frequency)*2-1);
		
		noise += n * amplitude;

		amplitude *= persistence;
		frequency *= lacunarity;
	}

	return noise;
}

float calculateDensity(int3 cell) {
	float3 worldPos = (cell / float(textureSize-1.0) - 0.5f) * planetSize;

	float halfS = planetSize / 2;
	float maxD = length(float3(halfS,halfS,halfS));

	float fudge = 1;

	float density = length(worldPos) / (maxD + fudge) - 0.5;

	// Noise
	float noise = fbm(6, 2, 0.5, noiseScale, worldPos) * noiseHeightMultiplier;

	density += noise;

	return density;
}

[numthreads(8,8,8)]
void CSMain (int3 id : SV_DispatchThreadID)
{
	if (id.x >= textureSize || id.y >= textureSize || id.z >= textureSize) {
		return;
	}

	float density = 0;

	const int b = 1;
	if (id.x >= textureSize-b || id.y >= textureSize-b || id.z >= textureSize-b) {
		density = 1;
	}
	else if (id.x <= b || id.y <= b || id.z <=b) {
		density = 1;
	}
	else {
		density = calculateDensity(id);
	}

	DensityTexture[id] = density;
}
