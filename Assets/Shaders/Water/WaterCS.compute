// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMesh
//#pragma kernel CSPerlin

struct Vector3
{
    float x, y, z;
};

RWStructuredBuffer<Vector3> vertices;
RWStructuredBuffer<int> trianglesUp;
RWStructuredBuffer<int> trianglesDown;


int posx;
int posy;
int resolution;
int sideResolution;
float radius;

float3 localUp, axisA, axisB;

[numthreads(32, 32, 1)]
void CSMesh(uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;
    int index = x + y * resolution;
    int triIndex = 6 * x + y * 6 * (resolution - 1);
    
    float2 percent =
    {
        (x + (resolution - 1.0) * posx) / ((resolution - 1.0) * sideResolution),
        (y + (resolution - 1.0) * posy) / ((resolution - 1.0) * sideResolution)
    };
    
    float3 pointOnUnitCube = localUp + (percent.x - .5) * 2 * axisA + (percent.y - .5) * 2 * axisB;
    float3 pointOnUnitSphere = normalize(pointOnUnitCube) * radius;
    
    vertices[index].x = pointOnUnitSphere.x;
    vertices[index].y = pointOnUnitSphere.y;
    vertices[index].z = pointOnUnitSphere.z;
    
    if (x != resolution - 1 && y != resolution - 1)
    {
        trianglesUp[triIndex] = index;
        trianglesUp[triIndex + 1] = index + resolution + 1;
        trianglesUp[triIndex + 2] = index + resolution;
    
        trianglesUp[triIndex + 3] = index;
        trianglesUp[triIndex + 4] = index + 1;
        trianglesUp[triIndex + 5] = index + resolution + 1;
        
        trianglesDown[triIndex + 2] = index;
        trianglesDown[triIndex + 1] = index + resolution + 1;
        trianglesDown[triIndex]     = index + resolution;
        
        trianglesDown[triIndex + 5] = index;
        trianglesDown[triIndex + 4] = index + 1;
        trianglesDown[triIndex + 3] = index + resolution + 1;
        
    }
}

